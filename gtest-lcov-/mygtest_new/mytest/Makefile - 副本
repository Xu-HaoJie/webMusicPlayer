# A sample Makefile for building Google Test and using it in user
# tests.  Please tweak it to suit your environment and project.  You
# may want to move it to your project's root directory.
#
# SYNOPSIS:
#
#   make [all]  - makes everything.
#   make TARGET - makes the given target.
#   make clean  - removes all files generated by make.

# Please tweak the following variable definitions as needed by your
# project, except GTEST_HEADERS, which you can use in your own targets
# but shouldn't modify.

# Points to the root of Google Test, relative to where this file is.
# Remember to tweak this if you move this file.
GTEST_DIR = /home/fanchenxin/tools/mygtest_new/

# Where to find user code.
USER_DIR = /home/fanchenxin/mytest/test_code/ALSA_test#test_example

# Flags passed to the preprocessor.
# Set Google Test's header directory as a system directory, such that
# the compiler doesn't generate warnings in Google Test headers.
CPPFLAGS += -isystem $(GTEST_DIR)/include

# Flags passed to the C++ compiler.
CXXFLAGS += -g -Wall -Wextra -pthread -fprofile-arcs -ftest-coverage 

# All tests produced by this Makefile.  Remember to add new tests you
# created to the list.
TESTS = test_run

# the link library you should change according to your need
LINK_LIB = lasound

#you need change according your test file name
UNDER_TEST_INTERFACE_C =  HAL_AudioDisplay.c  #under_test_fun.c   #under test interface
UNDER_TEST_INTERFACE_H =  HAL_AudioDisplay.h  #under_test_fun.h
UNDER_TEST_INTERFACE_O =  HAL_AudioDisplay.o  #under_test_fun.o

# All Google Test headers.  Usually you shouldn't change this
# definition.
GTEST_HEADERS = $(GTEST_DIR)/include/gtest/*.h \
                $(GTEST_DIR)/include/gtest/internal/*.h

# House-keeping build targets.

all : $(TESTS)

clean :
	rm -f $(TESTS) gtest.a gtest_main.a *.o *.gcno *.gcda *.info 

# Builds gtest.a and gtest_main.a.

# Usually you shouldn't tweak such internal variables, indicated by a
# trailing _.
GTEST_SRCS_ = $(GTEST_DIR)/src/*.cc $(GTEST_DIR)/src/*.h $(GTEST_HEADERS)

# For simplicity and to avoid depending on Google Test's
# implementation details, the dependencies specified below are
# conservative and not optimized.  This is fine as Google Test
# compiles fast and for ordinary users its source rarely changes.
gtest-all.o : $(GTEST_SRCS_)
	g++ $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest-all.cc -lasound

gtest_main.o : $(GTEST_SRCS_)
	g++ $(CPPFLAGS) -I$(GTEST_DIR) $(CXXFLAGS) -c \
            $(GTEST_DIR)/src/gtest_main.cc

gtest.a : gtest-all.o
	$(AR) $(ARFLAGS) $@ $^

gtest_main.a : gtest-all.o gtest_main.o
	$(AR) $(ARFLAGS) $@ $^

# Builds a sample test.  A test should link with either gtest.a or
# gtest_main.a, depending on whether it defines its own main()
# function.

$(UNDER_TEST_INTERFACE_O) : $(USER_DIR)/$(UNDER_TEST_INTERFACE_C) $(USER_DIR)/$(UNDER_TEST_INTERFACE_H) $(GTEST_HEADERS)
	g++ $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/$(UNDER_TEST_INTERFACE_C) -$(LINK_LIB)

test_case.o : $(USER_DIR)/test_case.c \
                     $(USER_DIR)/$(UNDER_TEST_INTERFACE_H) $(GTEST_HEADERS)
	g++ $(CPPFLAGS) $(CXXFLAGS) -c $(USER_DIR)/test_case.c -$(LINK_LIB)

test_run : $(UNDER_TEST_INTERFACE_O) test_case.o gtest_main.a
	g++ $(CPPFLAGS) $(CXXFLAGS) -lpthread  $^ -o $@ -$(LINK_LIB)
